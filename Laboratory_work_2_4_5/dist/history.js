export class GameHistory {
    constructor() {
        this.STORAGE_KEY = "chess_game_history";
        this.games = [];
        this.loadGames();
    }
    async saveGame(gameData) {
        const duration = Math.floor((gameData.endTime.getTime() - gameData.startTime.getTime()) / 1000);
        const gameRecord = {
            id: this.generateGameId(),
            startTime: gameData.startTime,
            endTime: gameData.endTime,
            gameMode: gameData.gameMode,
            moveCount: gameData.moveCount,
            result: gameData.result,
            duration,
        };
        this.games.unshift(gameRecord); // –î–æ–¥–∞—î–º–æ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É
        // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —ñ–≥–æ—Ä (–æ—Å—Ç–∞–Ω–Ω—ñ 50)
        if (this.games.length > 50) {
            this.games = this.games.slice(0, 50);
        }
        await this.saveGames();
        console.log("üéÆ –ì—Ä—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó");
    }
    async displayHistory() {
        const historyContainer = document.getElementById("history-container");
        if (!historyContainer)
            return;
        if (this.games.length === 0) {
            historyContainer.innerHTML = `
                <div style="text-align: center; color: #666; padding: 40px;">
                    <h3>üìù –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è</h3>
                    <p>–ó—ñ–≥—Ä–∞–π—Ç–µ –ø–µ—Ä—à—É –ø–∞—Ä—Ç—ñ—é, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Ç—É—Ç!</p>
                </div>
            `;
            return;
        }
        let historyHTML = '<h3 style="margin-bottom: 20px; color: #4a5568;">üìú –û—Å—Ç–∞–Ω–Ω—ñ –ø–∞—Ä—Ç—ñ—ó</h3>';
        this.games.forEach((game, index) => {
            const gameNumber = this.games.length - index;
            const startTimeStr = this.formatDate(game.startTime);
            const durationStr = this.formatDuration(game.duration);
            const resultStr = this.formatResult(game.result);
            const modeStr = game.gameMode === "local" ? "üë• –õ–æ–∫–∞–ª—å–Ω–∞ –≥—Ä–∞" : "ü§ñ –ì—Ä–∞ –ø—Ä–æ—Ç–∏ –±–æ—Ç–∞";
            historyHTML += `
                <div class="history-item">
                    <div class="history-date">
                        üéÆ –ü–∞—Ä—Ç—ñ—è #${gameNumber} ‚Ä¢ ${startTimeStr}
                    </div>
                    <div class="history-details">
                        <div style="margin: 8px 0;">
                            <strong>–†–µ–∂–∏–º:</strong> ${modeStr}
                        </div>
                        <div style="margin: 8px 0;">
                            <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> ${resultStr}
                        </div>
                        <div style="margin: 8px 0;">
                            <strong>–•–æ–¥—ñ–≤ –∑—Ä–æ–±–ª–µ–Ω–æ:</strong> ${game.moveCount}
                        </div>
                        <div style="margin: 8px 0;">
                            <strong>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</strong> ${durationStr}
                        </div>
                    </div>
                </div>
            `;
        });
        historyContainer.innerHTML = historyHTML;
    }
    loadGames() {
        try {
            const storedGames = localStorage.getItem(this.STORAGE_KEY);
            if (storedGames) {
                const parsedGames = JSON.parse(storedGames);
                this.games = parsedGames.map((game) => ({
                    ...game,
                    startTime: new Date(game.startTime),
                    endTime: new Date(game.endTime),
                }));
            }
        }
        catch (error) {
            console.warn("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó:", error);
            this.games = [];
        }
    }
    async saveGames() {
        try {
            const gamesData = this.games.map((game) => ({
                ...game,
                startTime: game.startTime.toISOString(),
                endTime: game.endTime.toISOString(),
            }));
            localStorage.setItem(this.STORAGE_KEY, JSON.stringify(gamesData));
        }
        catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó:", error);
        }
    }
    generateGameId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }
    formatDate(date) {
        const now = new Date();
        const diffMs = now.getTime() - date.getTime();
        const diffMinutes = Math.floor(diffMs / (1000 * 60));
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
        if (diffMinutes < 1) {
            return "—â–æ–π–Ω–æ";
        }
        else if (diffMinutes < 60) {
            return `${diffMinutes} —Ö–≤ —Ç–æ–º—É`;
        }
        else if (diffHours < 24) {
            return `${diffHours} –≥–æ–¥ —Ç–æ–º—É`;
        }
        else if (diffDays < 7) {
            return `${diffDays} –¥ —Ç–æ–º—É`;
        }
        else {
            return date.toLocaleDateString("uk-UA", {
                year: "numeric",
                month: "short",
                day: "numeric",
                hour: "2-digit",
                minute: "2-digit",
            });
        }
    }
    formatDuration(seconds) {
        if (seconds < 60) {
            return `${seconds} —Å–µ–∫`;
        }
        else if (seconds < 3600) {
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = seconds % 60;
            return remainingSeconds > 0
                ? `${minutes} —Ö–≤ ${remainingSeconds} —Å–µ–∫`
                : `${minutes} —Ö–≤`;
        }
        else {
            const hours = Math.floor(seconds / 3600);
            const remainingMinutes = Math.floor((seconds % 3600) / 60);
            return remainingMinutes > 0
                ? `${hours} –≥–æ–¥ ${remainingMinutes} —Ö–≤`
                : `${hours} –≥–æ–¥`;
        }
    }
    formatResult(result) {
        switch (result) {
            case "white-wins":
                return "üèÜ –ü–µ—Ä–µ–º–æ–≥–∞ –±—ñ–ª–∏—Ö";
            case "black-wins":
                return "üèÜ –ü–µ—Ä–µ–º–æ–≥–∞ —á–æ—Ä–Ω–∏—Ö";
            case "draw":
                return "ü§ù –ù—ñ—á–∏—è";
            case "ongoing":
                return "‚è≥ –ì—Ä–∞ —Ç—Ä–∏–≤–∞—î";
            default:
                return "‚ùì –ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç";
        }
    }
    getGameStats() {
        const stats = {
            totalGames: this.games.length,
            whiteWins: 0,
            blackWins: 0,
            draws: 0,
            localGames: 0,
            botGames: 0,
        };
        this.games.forEach((game) => {
            switch (game.result) {
                case "white-wins":
                    stats.whiteWins++;
                    break;
                case "black-wins":
                    stats.blackWins++;
                    break;
                case "draw":
                    stats.draws++;
                    break;
            }
            if (game.gameMode === "local") {
                stats.localGames++;
            }
            else {
                stats.botGames++;
            }
        });
        return stats;
    }
    clearHistory() {
        this.games = [];
        this.saveGames();
        console.log("üóëÔ∏è –Ü—Å—Ç–æ—Ä—ñ—é –æ—á–∏—â–µ–Ω–æ");
    }
}
//# sourceMappingURL=history.js.map